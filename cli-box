#!/usr/bin/env bash
# This script was generated by bashly 1.0.3 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cli_box_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli-box\n"
    echo

    printf "  cli-box is a bash script that builds a Docker image with a preconfigured\n  environment for CLI tools.\n"
    echo

  else
    printf "cli-box - cli-box is a bash script that builds a Docker image with a preconfigured environment for CLI tools.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli-box COMMAND\n"
  printf "  cli-box [COMMAND] --help | -h\n"
  printf "  cli-box --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Build the cli-box Docker image\n" "build "
  printf "  %s   Build and push the cli-box Docker image to Docker registry\n" "push  "
  printf "  %s   Check for avialble updates for configured tools\n" "update"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
cli_box_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli-box build - Build the cli-box Docker image\n"
    echo

  else
    printf "cli-box build - Build the cli-box Docker image\n"
    echo

  fi

  printf "Alias: b\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cli-box build\n"
  printf "  cli-box build --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_box_push_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli-box push - Build and push the cli-box Docker image to Docker registry\n"
    echo

  else
    printf "cli-box push - Build and push the cli-box Docker image to Docker registry\n"
    echo

  fi

  printf "Alias: p\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cli-box push\n"
  printf "  cli-box push --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_box_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli-box update - Check for avialble updates for configured tools\n"
    echo

  else
    printf "cli-box update - Check for avialble updates for configured tools\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "%s\n" "Usage:"
  printf "  cli-box update\n"
  printf "  cli-box update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.user_lib
# src/lib/generate_dockerfile.sh
# generate Dockerfile
function generate_dockerfile {
  # Define the Dockerfile contents as a variable
  DOCKERFILE_CONTENTS="
  FROM ${BASE_IMAGE}
  ${BASE_IMAGE_BUILD}
  "
  # Write the contents of the Dockerfile to a file
  printf "%s\n" "${DOCKERFILE_CONTENTS}" >"${DOCKERFILE}"

  # Install apps
  for app in $(yq e '.apps | keys | .[]' "${CONFIG_FILE}"); do
    url=$(yq e ".apps.${app}.${ARCH}_url" "${CONFIG_FILE}")
    replacements=$(yq e ".apps.${app}.replacements" "${CONFIG_FILE}")
    install_commands=$(yq e ".apps.${app}.install" "${CONFIG_FILE}")
    download_url=$(replace_variables "$url" "$replacements")
    install_tool "${download_url}" "${install_commands}"
  done
  after_build="
    COPY build/motd .
    COPY build/starship/ .
    COPY build/zsh/ .
    COPY build/tmux/ .
    WORKDIR /root
    "
  # Write the contents of the Dockerfile to a file
  printf "%s\n" "${after_build}" >>"${DOCKERFILE}"
}

# src/lib/get_system_arch.sh
# Detect the architecture of the system
function get_system_arch {
  case "$(uname -m)" in
  aarch64 | arm64) readonly ARCH="arm64" ;;
  amd64 | x86-64 | x86_64) readonly ARCH="amd64" ;;
  *)
    echo "Unsupported arch: ${ARCH}" >&2
    exit 1
    ;;
  esac
  echo ${ARCH}
}

# src/lib/install_tool.sh
# Function to install a tool
function install_tool {
  install_commands=$(echo "${2}" | sed "s#\${URL}#${1}#g")
  # Build app image
  printf 'RUN %s\n' "$install_commands" >>"${DOCKERFILE}"
}

# src/lib/replace_variables.sh
# Function to replace variables in a string
function replace_variables {
  local str="$1"
  local replacements="$2"
  local varname varval
  for pair in ${replacements}; do
    IFS='=' read -r varname varval <<<"$pair"
    str=$(echo "$str" | sed "s#\${${varname}}#${varval}#g")
  done
  echo "$str"
}

# :command.command_functions
# :command.function
cli_box_build_command() {
  # src/build_command.sh
  ARCH=$(get_system_arch)
  generate_dockerfile
  docker build -t "${IMAGE_NAME}:${ARCH}"-latest -f "${DOCKERFILE}" .
  rm "${DOCKERFILE}"

  # Print prompt for user
  readonly PROMPT="--------------------------------------------------------------------
  You can access the CLI tools using the following Docker run command:

  docker run -it -v $HOME:/root --network host decisivedevops/cli-box:${ARCH}-latest zsh\
  "
  printf "%s\n" "${PROMPT}"

}

# :command.function
cli_box_push_command() {
  # src/push_command.sh
  ARCH=$(get_system_arch)
  generate_dockerfile
  docker build -t "${IMAGE_NAME}:${ARCH}"-latest -f "${DOCKERFILE}" .
  rm "${DOCKERFILE}"
  docker push "${IMAGE_NAME}:${ARCH}"-latest

}

# :command.function
cli_box_update_command() {
  # src/update_command.sh
  # Read the yaml file and retrieve app information
  readarray -t apps < <(yq e '.apps | keys | .[]' "$CONFIG_FILE")

  # Initialize variables for non-GitHub URLs
  non_github_apps=""

  for app in "${apps[@]}"; do
      # Retrieve the current version of the app from the yaml file
      current_version=$(yq e ".apps.$app.replacements" "$CONFIG_FILE" | sed 's/.*VERSION=\([^[:space:]]*\).*/\1/')

      # Retrieve the changelog URL from the yaml file
      changelog_url=$(yq e ".apps.$app.changelog" "$CONFIG_FILE")

      # Check if the changelog URL is for GitHub
      if [[ "$changelog_url" == *"github.com"* ]]; then
          # Extract the GitHub username and repo name from the changelog URL using jq
          github_info=$(echo "$changelog_url" | jq -R 'split("/") | select(.[2] == "github.com") | {username: .[3], repo_name: .[4]}')
          username=$(echo "$github_info" | jq -r '.username')
          repo_name=$(echo "$github_info" | jq -r '.repo_name')

          # Use the GitHub API to retrieve the latest release version
          latest_version=$(curl -sfL "https://api.github.com/repos/$username/$repo_name/releases/latest" | jq -r ".tag_name")

          # Check if a new version is available
          if [[ "$latest_version" != "" && "$latest_version" != *"$current_version"* ]]; then
              echo "$app: new version available ($latest_version)"
          fi
      else
          # Add the app to the list of non-GitHub URLs
          non_github_apps+="$app: Current Version: $current_version -> $changelog_url"$'\n'
      fi
  done

  # Check for non-GitHub Apps
  if [[ -n "$non_github_apps" ]]; then
      printf "\nNon-GitHub Apps:\n%s" "$non_github_apps"
  fi

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        cli_box_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export CONFIG_FILE="${CONFIG_FILE:-config.yaml}"
  export DOCKERFILE="${DOCKERFILE:-Dockerfile.build}"
  export BASE_IMAGE="${BASE_IMAGE:-$(yq e '.base_image' "${CONFIG_FILE}")}"
  export BASE_IMAGE_BUILD="${BASE_IMAGE_BUILD:-$(yq e '.base_image_build' "${CONFIG_FILE}")}"
  export IMAGE_NAME="${IMAGE_NAME:-$(yq e '.image_name' "${CONFIG_FILE}")}"

  # :command.dependencies_filter
  if command -v docker >/dev/null 2>&1; then
    deps['docker']="$(command -v docker | head -n1)"
  else
    printf "missing dependency: docker\n" >&2
    printf "%s\n" "see 'https://github.com/decisivedevops/cli-box/blob/main/PREREQUISITES.md#install-docker'" >&2
    exit 1
  fi

  if command -v yq >/dev/null 2>&1; then
    deps['yq']="$(command -v yq | head -n1)"
  else
    printf "missing dependency: yq\n" >&2
    printf "%s\n" "see 'https://github.com/decisivedevops/cli-box/blob/main/PREREQUISITES.md#install-yq'" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    build | b)
      action="build"
      shift
      cli_box_build_parse_requirements "$@"
      shift $#
      ;;

    push | p)
      action="push"
      shift
      cli_box_push_parse_requirements "$@"
      shift $#
      ;;

    update | u)
      action="update"
      shift
      cli_box_update_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cli_box_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_box_build_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_box_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="build"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_box_push_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_box_push_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="push"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_box_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_box_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v jq >/dev/null 2>&1; then
    deps['jq']="$(command -v jq | head -n1)"
  else
    printf "missing dependency: jq\n" >&2
    printf "%s\n" "see 'https://stedolan.github.io/jq/download/'" >&2
    exit 1
  fi

  # :command.command_filter
  action="update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="1.0.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export CONFIG_FILE="${CONFIG_FILE:-config.yaml}"
  export DOCKERFILE="${DOCKERFILE:-Dockerfile.build}"
  export BASE_IMAGE="${BASE_IMAGE:-$(yq e '.base_image' "${CONFIG_FILE}")}"
  export BASE_IMAGE_BUILD="${BASE_IMAGE_BUILD:-$(yq e '.base_image_build' "${CONFIG_FILE}")}"
  export IMAGE_NAME="${IMAGE_NAME:-$(yq e '.image_name' "${CONFIG_FILE}")}"

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "build") cli_box_build_command ;;
    "push") cli_box_push_command ;;
    "update") cli_box_update_command ;;
  esac
}

initialize
run "$@"
